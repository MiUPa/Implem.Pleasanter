events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ログ設定
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # 基本設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # アップストリーム設定
    upstream pleasanter {
        server Implem.Pleasanter:80;
    }

    # HTTP から HTTPS へのリダイレクト
    server {
        listen 80;
        server_name ${DOMAIN_NAME};
        
        # Let's Encrypt の認証用ディレクトリを作成
        location /.well-known/acme-challenge/ {
            root /var/www/html;
            try_files $uri =404;
        }
        
        # HTTP から HTTPS へのリダイレクト
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS 設定
    server {
        listen 443 ssl http2;
        server_name ${DOMAIN_NAME};

        # SSL証明書の設定
        ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
        
        # SSL設定
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # セキュリティヘッダー
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Pleasanter アプリケーション
        location / {
            proxy_pass http://pleasanter;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # ファイルアップロードサイズ制限
            client_max_body_size 100M;
        }

        # CodeDefiner へのプロキシ（オプション）
        location /codedefiner/ {
            # CodeDefinerが利用可能な場合のみプロキシ
            proxy_pass http://Implem.CodeDefiner:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CodeDefinerが利用できない場合は404
            proxy_intercept_errors on;
            error_page 502 503 504 = @fallback;
        }

        # CodeDefinerが利用できない場合のフォールバック
        location @fallback {
            return 404 "CodeDefiner is not available";
        }

        # 静的ファイルのキャッシュ
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # エラーページ
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
} 